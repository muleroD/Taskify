type User {
    id: ID!
    profile: Profile!
    email: String!
    password: String!
    role: String
    status: String
    createdAt: String!
    lastLogin: String
}

input UserInput {
    email: String!
    password: String!
    profile: ProfileInput!
    role: String
}

type UserOutput {
    id: ID!
    email: String!
    profile: ProfileOutput!
    role: String
    status: String!
    lastLogin: String
}

input UserFilter {
    name: String
    email: String
}


# Query is for getting data
extend type Query {
    getUsers: [UserOutput]
    getUserById(id: ID!): UserOutput
    getUsersByFilter(input: UserFilter!): [UserOutput]
}

# Mutation is for changing data
extend type Mutation {
    deleteUser(id: ID!): UserOutput
    registerUser(input: UserInput!): UserOutput
}